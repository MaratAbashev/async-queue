services:
  consumer_service_db:
    image: consumer_service_db
    build:
      context: .
      dockerfile: DatabaseConsumer/Dockerfile
    ports:
      - "5164:8080"
    env_file:
      - .env
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST_CONSUMER}
      POSTGRES_USER: ${POSTGRES_USER_CONSUMER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_CONSUMER}
      POSTGRES_DB: ${POSTGRES_DB_CONSUMER}
    depends_on:
      - db-consumer
      
      
  broker-api:
    image: broker-api
    build:
      context: .
      dockerfile: BrokerApi/Dockerfile
    ports:
      - "5163:8080"
    env_file:
      - .env
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST_API}
      POSTGRES_USER: ${POSTGRES_USER_API}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_API}
      POSTGRES_DB: ${POSTGRES_DB_API}
    depends_on:
      - db-broker-api
      - kibana

  db-broker-api:
    image: postgres:latest
    container_name: db-broker-api
    ports:
      - "5438:5432"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER_API}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_API}
      POSTGRES_DB: ${POSTGRES_DB_API}
  
  db-consumer:
    image: postgres:latest
    container_name: db-consumer
    ports:
      - "5439:5432"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER_CONSUMER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_CONSUMER}
      POSTGRES_DB: ${POSTGRES_DB_CONSUMER}
      
  consumer-bot:
    image: consumer-bot
    build:
      context: .
      dockerfile: TelegramConsumer/Dockerfile
    ports:
      - "5165:8080"
    env_file:
      - .env
    depends_on:
      - broker-api
  
  console-producer:
    image: console-producer
    build:
      context: .
      dockerfile: ConsoleProducer/Dockerfile
    env_file:
      - .env
    depends_on:
      - broker-api
  console-consumer:
    image: console-consumer
    build:
      context: .
      dockerfile: ConsoleConsumer/Dockerfile
    ports:
      - "51488:8080"
    env_file:
      - .env
    depends_on:
      - broker-api
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOSTS}
    depends_on:
      - elasticsearch

volumes:
  esdata: